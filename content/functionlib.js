// Copyright Dave Kahler. Do not copy without permission.


var regexDefaults = "\"UPS\",\"^(1Z)\";\"Canada Post\",\"(CA)$\";\"FedEx\",\"^\\d{12,19}$\";\"USPS\",\"\\d{20,}\";\"DHL\",\"^\\d{10,11}$\"";

var URLDefaults ="\"UPS\",\"http://wwwapps.ups.com/etracking/tracking.cgi?InquiryNumber1=\",\"&TypeOfInquiryNumber=T&AcceptUPSLicenseAgreement=yes&submit=Track\";\"FedEx\",\"http://www.fedex.com/Tracking?tracknumbers=\",\"&action=track\";\"DHL\",\"http://track.dhl-usa.com/TrackByNbr.asp?ShipmentNumber=\",\"\";\"USPS\",\"http://trkcnfrm1.smi.usps.com/PTSInternetWeb/InterLabelInquiry.do?origTrackNum=\",\"\";\"Canada Post\",\"https://obc.canadapost.ca/emo/basicPin.do?trackingId=\",\"&trackingCode=PIN&action=query&language=en&sblid=dcsubmitted\";\"TNT\",\"http://webtracker.tnt.com/webtracker/tracking.do?requestType=GEN&searchType=CON&respLang=en&respCountry=US&sourceID=1&sourceCountry=ww&cons=\",\"\";\"Purolator\",\"http://shipnow.purolator.com/shiponline/track/purolatortrack.asp?pinno=\",\"\"";


var gInThunderbird = false;

function tpRemoveSpaces(myString)
{
	var newString = "";
	var i;
	
	myString = myString.toString();

	for (i=0;i<myString.length;i++)
	{
		if ((myString.charAt(i)!=" ") && (myString.charAt(i)!=".") && (myString.charAt(i)!=","))
			newString += myString.charAt(i);
	}

	return(newString);
}

function tpTrackPackage()
{
    var trackingString=tpGetTrackingString();
    var carrier;
    if (tpGetSmartSenseSetting() || gInThunderbird)
    {
        carrier = tpGetPackageCarrier(trackingString);
        var title = carrier + ": " + trackingString;
	    tpOpenPackageWindow(tpGetPackageURL(carrier,trackingString,true),false, true, title);
	}
    else
    {
        tpOpenPackageWindow("", false, true, "");
    }
    
    
}

function tpTrackGoogleMaps()
{
	var trackingString=tpGetTrackingString();
	var carrierOrig = tpGetCarrierString(trackingString);
	var carrier = carrierOrig.toLowerCase();
	var gmapsURL = "http://www.packagemapping.com?action=track&shipper=" + carrier + "&tracknum=" + trackingString;
	if (carrier.length)
	{
		tpOpenPackageWindow(gmapsURL,false,true);
		tpAddToHistory(carrierOrig,trackingString);
	}
}

function tpHistoryOpenMap(carrier,trackingString,forceTabs)
{
	var gmapsURL = "http://www.packagemapping.com?action=track&shipper=" + carrier + "&tracknum=" + trackingString;
	if (carrier.length)
	{
		tpOpenPackageWindow(gmapsURL,forceTabs,false);
	}
}

function tpButtonCallback(notification, button)
{
    var regexURLArray = tpGetRegexURLArray();
    for (var i=0;i<regexURLArray.length;i++)
    {
        var carrier = regexURLArray[i][0];
        if (carrier == button.label)
        {
            var title = carrier + ": " + notification.value;
            tpOpenPackageWindow(tpGetPackageURL(carrier,notification.value,true), false, false, title);
        }
    }
}

function tpOnBlur(event)
{
    // Close all notification boxes generated by this extension
    var notifyBox = gBrowser.getNotificationBox();
    var allNotifications = notifyBox.allNotifications;
    for (var i=0;i<allNotifications.length;i++)
    {
        var item = allNotifications[i];
        if (item.label.match("Track Package") || item.label.match("Tracked Package"))
        {
            item.close();
        }
    }
}

function tpOpenPackageWindow(URLString,forceTabs,offerCorrection,title)
{
	if (URLString!="")
	{
		if (gInThunderbird)
		{
			var messenger = Components.classes["@mozilla.org/messenger;1"].createInstance();         
			messenger = messenger.QueryInterface(Components.interfaces.nsIMessenger);
			messenger.launchExternalURL(URLString);
		}
		else
		{
			if (!tpGetTabSetting() && !forceTabs)
			{
				var newWindow = window.open(URLString);
			}
			else
			{
			    var newTab
				if (!forceTabs)
					newTab = openNewTabWith(URLString, null, null, true);
				else
					newTab = window.opener.openNewTabWith(URLString, null, null, true);
				
				if (typeof getBrowser == 'function')
				{
				    var container = getBrowser().tabContainer;
                    container.addEventListener("TabSelect", tpOnBlur, false);
                }
			}
			
			if (offerCorrection)
            {
                tpShowNotificationBox(false);
            }
		}
	}
	else
	{
		tpShowNotificationBox(true);
	}
}

function tpShowNotificationBox(firstTry)
{
    var buttons = new Array();
                
    var regexURLArray = tpGetRegexURLArray();
    for (var i=0;i<regexURLArray.length;i++)
    {
        var carrier = regexURLArray[i][0];
        buttons[i] = 
        {
            label: carrier,
            accessKey: null,
            //popup: 'trackPackageOptions',
            callback: tpButtonCallback
        };
    }

    if (tpGetNotificationsSetting() || firstTry)
    {
        var originalTrackingString=tpGetTrackingString();
        var notifyBox = gBrowser.getNotificationBox();
        var notifyText;
        if (firstTry)
        {
            notifyText = "Track Package - Choose Carrier";
        }
        else
        {
            notifyText = "Tracked Package via " + tpGetPackageCarrier(originalTrackingString) + ". Fix Carrier?";
        }
        
        notifyBox.appendNotification(notifyText, originalTrackingString, "chrome://trackpackage/content/icon.png", notifyBox.PRIORITY_INFO_HIGH, buttons);
    }
}

function searchSelected()
{
	var node = document.popupNode;
    var selection = "";

    if ((node instanceof HTMLTextAreaElement) || (node instanceof HTMLInputElement && node.type == "text"))
    {
        selection = node.value.substring(node.selectionStart, node.selectionEnd);
    } 
    else
    {
        var focusedWindow = new XPCNativeWrapper(document.commandDispatcher.focusedWindow, 'document', 'getSelection()');
        selection = focusedWindow.getSelection().toString();
    }

	//var focusedWindow = document.commandDispatcher.focusedWindow;
	var searchStr = selection;//focusedWindow.getSelection();
	searchStr = searchStr.toString();
	searchStr = searchStr.replace( /^\s+/, "" );
	searchStr = searchStr.replace(/(\n|\r|\t)+/g, " ");
	searchStr = searchStr.replace(/\s+$/,"");
	return searchStr;
}

function tpGetCarrierString(trackingString)
{
	// Determine what carrier this string belongs to
	var regexURLArray = tpGetRegexURLArray();
	for (var i=0;i<regexURLArray.length;i++)
	{
	
		if (regexURLArray[i][1]=="")
			continue;
	
		var regex = new RegExp(regexURLArray[i][1],"gi");
		if (regex.test(trackingString))
		{
			return(regexURLArray[i][0]);
		}
	}
	
	return(null);
}

function tpGetTrackingString()
{
	var trackingString="";
	if (!gInThunderbird)
	{
		trackingString=tpRemoveSpaces(searchSelected());
	}
	else
	{
		if ((typeof gContextMenu == 'object') && gContextMenu.searchSelected)
		{
			trackingString = tpRemoveSpaces(gContextMenu.searchSelected(30));
		}
		else if (typeof getBrowserSelection == 'function')
		{
			trackingString = tpRemoveSpaces(getBrowserSelection(30));
		}
		else
		{
			trackingString = tpRemoveSpaces(window._content.getSelection());
		}
	}
	
	return(trackingString);
}

function tpGetPackageCarrier(trackingString)
{
    // Determine what carrier this string belongs to
	var regexURLArray = tpGetRegexURLArray();
	var carrier;
	for (var i=0;i<regexURLArray.length;i++)
	{
		if (regexURLArray[i][1]=="")
			continue;

		var regex = new RegExp(regexURLArray[i][1],"gi");
		if (regex.test(trackingString))
		{
			carrier=regexURLArray[i][0];
			break;
		}
	}
	
	return carrier;
}

function tpGetPackageURL(carrier,trackingString,addToHistory)
{
	if (trackingString=="")
		return("");

	// Final URL
	var windowURL = "";

	// Determine what carrier this string belongs to
	var regexURLArray = tpGetRegexURLArray();
	for (var i=0;i<regexURLArray.length;i++)
	{
		if (regexURLArray[i][1]=="" && carrier.length==0)
			continue;

		var regex = new RegExp(regexURLArray[i][1],"gi");
		if ((carrier.length==0&&regex.test(trackingString))||(carrier==regexURLArray[i][0]))
		{
			carrier=regexURLArray[i][0];
			windowURL=regexURLArray[i][2] + trackingString + regexURLArray[i][3];
			break;
		}
	}
	
	if (addToHistory)
		tpAddToHistory(carrier,trackingString);

	return(windowURL);
}

function tpGetTabSetting()
{
	var myTPPrefs = Components.classes["@mozilla.org/preferences-service;1"].
					getService(Components.interfaces.nsIPrefService).getBranch("trackpackage.");
				
    return(myTPPrefs.getCharPref("tpCheckBox")=="true");
}

function tpGetSmartSenseSetting()
{
	var myTPPrefs = Components.classes["@mozilla.org/preferences-service;1"].
					getService(Components.interfaces.nsIPrefService).getBranch("trackpackage.");
				
    return(myTPPrefs.getCharPref("tpSmartSense")=="true");
}

function tpGetNotificationsSetting()
{
	var myTPPrefs = Components.classes["@mozilla.org/preferences-service;1"].
					getService(Components.interfaces.nsIPrefService).getBranch("trackpackage.");
				
    return(myTPPrefs.getCharPref("tpNotifications")=="true");
}

function tpGetGMapsSetting()
{
	var myTPPrefs = Components.classes["@mozilla.org/preferences-service;1"].
					getService(Components.interfaces.nsIPrefService).getBranch("trackpackage.");
				
    return(myTPPrefs.getCharPref("tpEnableGMaps")=="true");
}

function tpOpenHistory()
{
	window.open("chrome://trackpackage/content/history.xul",
	            "trackinghistory",
	            "chrome=yes,resizable=yes,centerscreen=yes,scrollbars=yes,width=720,height=600");
}

function tpAddToHistory(carrier,trackingString)
{
	var now=new Date();
	var finalDate = (now.getMonth()+1) + "/" + now.getDate() + "/" + now.getFullYear();
	
	var finalString;
	
	var myTPPrefs = Components.classes["@mozilla.org/preferences-service;1"].
					getService(Components.interfaces.nsIPrefService).getBranch("trackpackage.");
				
    var currentHistoryString = myTPPrefs.getCharPref("tpTrackingHistory");
	var maxNumbersAllowed = myTPPrefs.getCharPref("tpMaxNumbers");
	
	var numExistingNumbers = currentHistoryString.split(";").length;
	
	if (numExistingNumbers==maxNumbersAllowed)
	{
		// Pop one off the end
		var lastIndex = currentHistoryString.lastIndexOf(";");
		currentHistoryString = currentHistoryString.substring(0,lastIndex);
	}
	
	// Don't add a duplicate
	var trackingStringIndex = currentHistoryString.indexOf(trackingString);
	if (trackingStringIndex!=-1)
	{
	    for (var i = trackingStringIndex - 2; i >= 0; i--)
	    {
	        if (currentHistoryString[i] == ';')
	        {
	            break;
	        }
	    }
	    
	    for (var j = trackingStringIndex; j < currentHistoryString.length; j++)
	    {
	        if (currentHistoryString[j] == ',')
	        {
	            break;
	        }
	    }
	    
	    i = Math.max(0, i);

	    finalString = currentHistoryString.replace(currentHistoryString.substr(i, j), carrier + "," + trackingString)
	}
	else
	{
	    if (currentHistoryString.length>0)
	    {
		    finalString = carrier + "," + trackingString + "," + finalDate + ";" + currentHistoryString;
	    }
	    else
	    {
		    finalString = carrier + "," + trackingString + "," + finalDate;
	    }
	}
	
	myTPPrefs.setCharPref("tpTrackingHistory",finalString);
}

function tpAllIndicesOf(character,string)
{
	var finalArray = new Array();
	for (var i=0;i<string.length;i++)
	{
		if (string[i]==character)
		{
			finalArray[finalArray.length] = i;
		}
	}
	
	return(finalArray);
}

function tpExtractQuotedStrings(string)
{
	var quoteIndices = tpAllIndicesOf("\"",string);
	
	// Must be even
	if (quoteIndices.length%2!=0)
	{
		alert("Malformed preference! Contact support@trackpackageextension.com");
		return("");
	}
	
	var finalArray = new Array();
	for (var i=0;i<quoteIndices.length;i+=2)
	{
		var thisQuote = string.substring(quoteIndices[i]+1,quoteIndices[i+1]);
		finalArray[finalArray.length] = thisQuote;
	}
	
	return(finalArray);
}

function tpGetRegexURLArray()
{

	var tpPrefs = Components.classes["@mozilla.org/preferences-service;1"].
					getService(Components.interfaces.nsIPrefService).getBranch("trackpackage.");

	// Loop through regex defines
	var regexesArray = tpPrefs.getCharPref("tpRegex").split(";");
	var finalArray = new Array();
	for (var i=0;i<regexesArray.length;i++)
	{
		var carrierRegex = tpExtractQuotedStrings(regexesArray[i]);
		var currentIndex = finalArray.length;
		finalArray[currentIndex] = new Array();
		finalArray[currentIndex][0] = carrierRegex[0];
		finalArray[currentIndex][1] = carrierRegex[1];
	}

	// Loop through URL defines
	var urlArray = tpPrefs.getCharPref("tpURL").split(";");
	for (var i=0;i<urlArray.length;i++)
	{
		var carrierURL = tpExtractQuotedStrings(urlArray[i]);
		
		var foundRegexMatch=false;
		for (var j=0;j<finalArray.length;j++)
		{
			if (finalArray[j][0]==carrierURL[0])
			{
				finalArray[j][2] = carrierURL[1];
				finalArray[j][3] = carrierURL[2];
				foundRegexMatch=true;
			}
		}
		
		if (!foundRegexMatch)
		{
			var currentIndex = finalArray.length;
			finalArray[currentIndex] = new Array();
			finalArray[currentIndex][0] = carrierURL[0];
			finalArray[currentIndex][1] = "";
			finalArray[currentIndex][2] = carrierURL[1];
			finalArray[currentIndex][3] = carrierURL[2];
		}
	}
	
	return(finalArray);
}






















